1. coś o historii (kto i  po co pythona stworzył, skąd nazwa ~ 5 min)

	Python został stworzony przez Guido van Rossum - Holendra w grudniu 1989 jako zajęcie na święta.
	Nazwa jest od grupy Monthy Python.
	Jest wiele odniesień do skeczów w dokumentacji/przykładach.
	
	coś o pozycji w świecie -> np wykres z TIOBE http://www.tiobe.com/tiobe-index/
	Jest dosyć uniwersalny
	coś o tym, ze jest
		- interpretowalny
		- dynamicznie, silnie typowany
	W można pisać bezpośrednio w interpreterze i wykonywac kod
	Albo napisać ko wcześniej w jakimś edytorze i uruchomić za pomocą interpretera.
	Dzięki temu nie trzeba za każdym razem od nowa pisać programów.
	Zaczniemy od ćwiczen w interpreterze, a później przejdziemy do pisania
	programów bardziej złożonych.
	Wymagania od edytora tekstu są takie, żeby zapisywał tekst zakodowany w 
	UTF-8 i nie dodawał od siebie żadnych dodatkowych formatowań.
	Wygodnie jest też gdy zamiast znaku tabulacji edytor będzie wstawiał 4 spacje. 
	

2. coś o interpreterze i tym jak uruchamiać programy

	Instrukcja dla linux
	uruchomienie konsoli (Alt+Ctrl+t) -> python3
	jesteśmy wewnątrz interpretera
	jeśli komuś nie działa to znaczy, że nieskonfigurował środowiska

	teraz:
	print('Hello World')

	stworzenie pliku hello_world.py
	uruchomienie poprzez python hello_world.py
	Działa i jest piękne chyba, że ktoś ma nieskonfigurowane środowisko
	uruchomienie poprzez ./hello_world.py
	Nie działa :( (przynajmniej na Linuxach)
	dołożenie uprawnień chmod +x hello_world.py
	nie działa :( (z innego powodu)
	dołożenie shebang: #!/usr/bin/env python3
	Działa !!!
	.py --> .pyc --> wykonanie

	Interpreter jest fajny, zeby coś na szybko przetestować, 
	ale nie będziemy za każdym razem pisać programów od początku

3. coś o zmiennych (dynamicznie, silnie typowany i jakie są tego konsekwencje)

	Przykład tworzenia zmiennej w interpreterze:
		a = 'tralala'
		print(a)
		type(a)
		b = 15
		print(b)
		type(b)
		a + b
		b + a
		c = 1234
		a = c
		print(a)
		type(a)
		a + b

4. coś o wyrażeniach arytmetycznych (dzielenie dwóch intów (różnica między 2.7 a 3.5)!
	
	Znów interpreter:
		>>> a = 12
		>>> b = 6
	dodawanie:
		>>> a + b
		>>> c = a + b
		>>> print(c)
		>>> type(c)
	odejmowanie:		
		>>> c = a - b
		>>> print(c)
		>>> type(c)
	mnożenie
		>>> c = a * b
		>>> print(c)
		>>> type(c)
	dzielenie I
		>>> c = a / b
		>>> print(c)		2.0
		>>> type(c)			<class 'float'>
	dzielenie II
		>>> c = b / a
		>>> print(c)		0.5
		>>> type(c)			<class 'float'>
	dzielenie modulo:
	    >>> 8 % 2        0
            >>> 13 % 5       3
	zaokrąglanie:
		>>> int(c)			0
		>>> int(0.8)		0
	potęgowanie I:
		>>> c = a ** b
		>>> print(c)		2985984
		>>> type(c)			<class 'int'>
	potęgowanie II:
		>>> c = a ** b ** b
		>>> type(c)			<class 'int'>
		>>> print(c)		50351 cyfr i dalej int
	+=, -=, *=, /=:
		a += b
		a -= b
		a *= b
		a /= b

5. Podstawowe typy danych: int, float, string, list, tuple, dict, set
	
	int:
		- liczby całkowite
		- "nieograniczony"
	float:
		- liczby zmiennoprzecinkowe
		- UWAGA na pułapki liczb zmiennoprzecinkowych:
			>>> 0.1 + 0.1 == 0.2			True
			>>> 0.1 + 0.1 + 0.1 == 0.3		False
			>>> 3 * 0.1						0.30000000000000004
			>>> 0.3							0.3
			>>> 0.1 * 2						0.2
	string:
		- przechowuje napis:
			>>> a = 'Python is the best'
			>>> type(a)		<class 'str'>
		- można indeksować:
			>>> a[0]					'P'
			>>> a[1]					'y'
			>>> a[100]					IndexError: string index out of range
			>>> a[-1]					't'
		- "niezmienny":
			>>> a = 'Python is the best'
			>>> b = a
			>>> a			'Python is the best'
			>>> b			'Python is the best'
			>>> a += '!'
			>>> a			'Python is the best!'
			>>> b			'Python is the best'
			>>> a[2] = '-'	TypeError: 'str' object does not support item assignment
	list:
		- przechowuje dowolne obiekty:
			>>> a = []
			>>> a				[]
			>>> type(a)			<class 'list'>
			>>> b = [1, 0.67, 'zawsze drugi']
			>>> type(b)			<class 'list'>
			>>> b				[1, 0.67, 'zawsze drugi']
	- można indeksować:
			>>> b[0]			1
			>>> b[1]			0.67
			>>> b[2]			'zawsze drugi'
			>>> b[3]			IndexError: list index out of range
	- można zapisywać pod istniejącym indeksem ("zmienny" - "mutable"):
			>>> b = [1, 0.67, 'zawsze drugi']
			>>> a = b
			>>> a				[1, 0.67, 'zawsze drugi']
			>>> b				[1, 0.67, 'zawsze drugi']
			>>> b[0] = 123.456
			>>> b				[123.456, 0.67, 'zawsze drugi']
			>>> a				[123.456, 0.67, 'zawsze drugi']
			>>> b[3] = 3		IndexError: list assignment index out of range
	- tuple:
		- tak jak lista, tylko niezmienny:
			>>> a = (1, 2.0, 'ostatni')
			>>> type(a)			<class 'tuple'>
			>>> b = a
			>>> a				(1, 2.0, 'ostatni')
			>>> b				(1, 2.0, 'ostatni')
			>>> b += 1			TypeError: can only concatenate tuple (not "int") to tuple
			>>> b += (1, 34)
			>>> b				(1, 2.0, 'ostatni', 1, 34)
			>>> a				(1, 2.0, 'ostatni')
		- UWAGA na nawiasy:
			>>> a = (12)
			>>> a				12
			>>> type(a)			<class 'int'>
			>>> a = (12, )
			>>> type(a)			<class 'tuple'>
			>>> a				(12,)
			>>> b = 1, 2, 3
			>>> b				(1, 2, 3)
			>>> type(b)			<class 'tuple'>
	- dict:
		Mapuje klucz --> wartość, kolejność wstawiania nie jest zazwyczaj zachowywana (ale może być):
			>>> a = {}
			>>> type(a)								<class 'dict'>
			>>> a = {1: 2}
			>>> type(a)								<class 'dict'>
			>>> a									{1: 2}
			>>> a = {1: 2, 'zawsze': 'drugi'}
			>>> a									{1: 2, 'zawsze': 'drugi'}
			>>> a[1]								2
			>>> a['zawsze']							'drugi'
			>>> a['nie ma takiego klucza']			KeyError: 'nie ma takiego klucza'
		Kluczami mogą być tylko obiekty hashowalne ("niezmienne"):
			>>> b = {[1]:  1}						TypeError: unhashable type: 'list'
		Ale sam słownik jest obiektem zmiennym:
			>>> a = {1: 'a', 2: 'c'}
			>>> b = a
			>>> a			{1: 'a', 2: 'c'}
			>>> b			{1: 'a', 2: 'c'}
			>>> a[2] = 'b'
			>>> a			{1: 'a', 2: 'b'}
			>>> b			{1: 'a', 2: 'b'}
		Można przypisywać wartości do nieistniejących jeszcze kluczy:
			>>> a[3] = 'c'
			>>> a			{1: 'a', 2: 'b', 3: 'c'}
			>>> b			{1: 'a', 2: 'b', 3: 'c'}
	- set:
		Zbiór obiektów hashowalnych ("niezmiennych"):
			>>> a = {1, 2, 3, 4}
			>>> b = set(5, 6, 7)			TypeError: set expected at most 1 arguments, got 3
			>>> b = set((5, 6, 7))
			>>> a			{1, 2, 3, 4}
			>>> b			{5, 6, 7}
			>>> c = {[1, 2], 3, 4, 5}		TypeError: unhashable type: 'list'
		Ale sam zbiór już jest obiektem "zmiennym":
			>>> a = {0, 1, 2, 3, 4, 5}
			>>> b = a
			>>> a			{0, 1, 2, 3, 4, 5}
			>>> b			{0, 1, 2, 3, 4, 5}
			>>> a.add(90)
			>>> a			{0, 1, 2, 3, 4, 5, 90}
			>>> b			{0, 1, 2, 3, 4, 5, 90}
		Zbiór nie jest uporządkowany, jeśli jakiś element wystąpił więcej niż 
		raz to w zbiorze będzie tylko raz:
			>>> a = {'q', 'w',  'e', 'a', 'q', 'w', 'q'}
			>>> a			{'e', 'a', 'q', 'w'}

6. Testowanie True/False

		>>> a = True
		>>> b = False
		>>> type(a)			<class 'bool'>
		>>> type(b)			<class 'bool'>
		>>> bool(a)			True
		>>> bool(b)			False
		>>> bool(0)			False
		>>> bool(1)			True
		>>> bool(0.0)		False
		>>> bool(0.1)		True
		>>> bool('')		False
		>>> bool('0')		True
		>>> c = []
		>>> d = {}
		>>> e = set()
		>>> f = tuple()
		>>> bool(c)			False
		>>> bool(d)			False
		>>> bool(e)			False
		>>> bool(f)			False
		>>> c = [0]
		>>> d = {False: True}
		>>> e = set(c)
		>>> f = (0, )
		>>> bool(c)			True
		>>> bool(d)			True
		>>> bool(e)			True
		>>> bool(f)			True

7. operatory porównań: is, ==, !=, is not, <, >, <=, >=, !=, is not
    - is:
        Porównuje adresy w pamięci dwóch obiektów
            >>> a = 'Ala'
            >>> b = a
            >>> a is b            True
            >>> a += ' ma Asa'
            >>> a is b            False
            >>> a            'Ala ma Asa'
            >>> b            'Ala'
            >>> a = [1, 2, 3]
            >>> b = [1, 2, 3]
            >>> c = a
            >>> a is b            False
            >>> b is c            False
            >>> a is c            True
    - == :
        Porównuje czy obiekty są sobie równe, czy mają tę samą "wartość":
            >>> a = [1, 2, 3]
            >>> b = [1, 2, 3]
            >>> a == b				True
            >>> 2.0 == 2			True
        UWAGA na porównywanie liczb zmiennoprzecinkowych!
            >>> 3 * 0.1 == 0.3		False
	- is not:
		Sprawdza czy dwa obiekty są różne na podstawie adresów w pamięci:
			>>> a = 'abc'
			>>> b = 'abc'
			>>> a is not b			False
			>>> a is b				True
			>>> a = [1, 2, 3]
			>>> b = [1, 2, 3]
			>>> a is not b			True
	- != :
		Sprawdza czy dwa obiekty są różne na podstawie ich "wartości" 
			>>> a = [1, 2, 3]
			>>> b = [1, 2, 3]
			>>> a != b						False
			>>> 1 != 1.0					False
			>>> 0.3 != 3*0.1				True
	- < :
		mniejsze niż
			>>> 1 < 2						True
	- > :
		większe niż
	- <= :
		mniejsze lub równe
	- >= :
		większe lub równe
		
8. coś o wyrażeniach warunkowych (if, else, elif, for, while)
	- if:
	    ify.py
	    if_else.py
	    if_elif_else.py	    
	- for
	    for.py
	    for_string.py
	    for_continue.py
	    for_break.py
	    for_else.py
	- while:
	    blok kodu będzie się wykonywał cyklicznie dopóki warunek będzie prawdziwy
	    działa break
	    działa continue
	    działa else
	    while True: # przykład nieskończonej pętli

9. do końca zajęć nawijać o typach danych
    - in
    	- w listach sa przeszukiwane wszsytkie elementy po kolei 
    	czas wyszukiwania zależy od rozmiaru listy
		    >>> a = [1, 2, 3, 4, 5]
		    >>> 1 in a				True
		    >>> 7 in a				False
        - w zbiorach wyszukiwanie nie zależy od rozmiaru zbioru - jest stałe 
		    >>> b = set(a)
		    >>> 1 in b				True
		    >>> 7 in b				False
		- w słownikach wyszukiwane są tylko klucze, czas wyszukiwania nie zależy
		 od liczby elementów w słowniku
		    >>> c = {1: 'a', 2: 'b'}
			>>> 1 in c				True
			>>> 'a' in c			False
			>>> c['a'] = 12
			>>> c					{1: 'a', 2: 'b', 'a': 12}
			>>> 'a' in c			True

    - szybkie tworzenie listy o danym rozmiarze:
        >>> a = [0] * 10
        >>> a               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        >>> len(a)          10
    - wycinki
    	a[start:end:step] -> start (pierwszy, który wejdzie do wycinka),
    						 end (pierwszy, który znajdzie się poza wycinkiem),
    						 step (co, który element zostanie wzięty)
    						 wartości start, end, step mogą być ujemne
    						 ujemne wartości znaczą - liczymo od końca a nie od początku
    						 mogą tez być wrtością None - zostaną zinterpretowane jakby nie były podane
    		a[-1]    # ostatni element - nie jako sekwencja
			a[-2:]   # ostatnie dwa elementy - jako sekwencja
			a[:-2]   # cała sekwencja poza ostatnimi dwoma elementami
			a[::-1]  # tworzy nową sekwencję w odwrotnej kolejności
		Szersze wyjaśnienie: http://stackoverflow.com/a/509295
        - listy
			>>> a = list(range(101))
			>>> a				[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
			>>> b = a[:50]
			>>> b				[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
			>>> c = a[50:]
			>>> c				[50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
			>>> len(a)			101
			>>> len(b)			50
			>>> len(c)			51
			>>> d =  a[::2]
			>>> d				[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]
			>>> len(d)			51
			>>> e = a[1::2]
			>>> e				[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]
			>>> len(e)			50
        - stringi działają tak samo
        	>>> a = 'abcdefghijklmnoprstuwxyz'
			>>> len(a)			24
			>>> b = a[:10]
			>>> len(b)			10
			>>> b				'abcdefghij'
			>>> type(b)			<class 'str'>
			>>> c = a[::3]
			>>> c				'adgjmptx'
        - list comprehension
		    >>> a = [x for x in range(10)]
			>>> a					[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
			>>> type(a)				<class 'list'>
			>>> x					NameError: name 'x' is not defined
			>>> b = [x for x in range(10) if x % 2 == 0]
			>>> b					[0, 2, 4, 6, 8]
        - tupli się tak nie da bo wyjdzie generator :)
		    >>> a = (x for x in range(10))
			>>> type(a)						<class 'generator'>
			>>> a							<generator object <genexpr> at 0x7fc26d6ebf30>
        - kopiowanie listy (shallow) za pomocą [:]
		    >>> a = list(range(21))
		    >>> f = a[:]
			>>> f				[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
			>>> f == a			True
			>>> f is a			False
			>>> a[0] = 123
			>>> a				[123, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
			>>> f				[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
			>>> f == a			False
    - listy
		- samorozszerzające się listy (append), działaja inplace
			python3 -m timeit 'a = [0] * 1000'
			python3 -m timeit 'a = []' 'for _ in range(1000):' '    a.append(0)'
			python3 -m timeit 'a = [0 for _ in range(1000)]'
			

